diff --git a/go.mod b/go.mod
index c9116d2329..2d90f3c2df 100644
--- a/go.mod
+++ b/go.mod
@@ -71,6 +71,7 @@ require (
 	github.com/spf13/cobra v1.2.1
 	github.com/spf13/pflag v1.0.5
 	github.com/spf13/viper v1.8.1
+	github.com/spiffe/go-spiffe/v2 v2.0.0-beta.6
 	github.com/stretchr/testify v1.7.0
 	github.com/xeipuuv/gojsonpointer v0.0.0-20190905194746-02993c407bfb // indirect
 	github.com/yl2chen/cidranger v1.0.2
diff --git a/go.sum b/go.sum
index e3f2abd11b..cc05c31487 100644
--- a/go.sum
+++ b/go.sum
@@ -1199,6 +1199,8 @@ github.com/spf13/pflag v1.0.1/go.mod h1:DYY7MBk1bdzusC3SYhjObp+wFpr4gzcvqqNjLnIn
 github.com/spf13/pflag v1.0.3/go.mod h1:DYY7MBk1bdzusC3SYhjObp+wFpr4gzcvqqNjLnInEg4=
 github.com/spf13/pflag v1.0.5 h1:iy+VFUOCP1a+8yFto/drg2CJ5u0yRoB7fZw3DKv/JXA=
 github.com/spf13/pflag v1.0.5/go.mod h1:McXfInJRrz4CZXVZOBLb0bTZqETkiAhM9Iw0y3An2Bg=
+github.com/spiffe/go-spiffe/v2 v2.0.0-beta.6 h1:3DOMziVxNur7Gq7JkfJg5sLZbbtfkBi13SlDfByV9YI=
+github.com/spiffe/go-spiffe/v2 v2.0.0-beta.6/go.mod h1:TEfgrEcyFhuSuvqohJt6IxENUNeHfndWCCV1EX7UaVk=
 github.com/stefanberger/go-pkcs11uri v0.0.0-20201008174630-78d3cae3a980/go.mod h1:AO3tvPzVZ/ayst6UlUKUv6rcPQInYe3IknH3jYhAKu8=
 github.com/stoewer/go-strcase v1.2.0/go.mod h1:IBiWB2sKIp3wVVQ3Y035++gc+knqhUQag1KpM8ahLw8=
 github.com/streadway/amqp v0.0.0-20190404075320-75d898a42a94/go.mod h1:AZpEONHx3DKn8O/DFsRAY58/XVQiIPMTMB1SddzLXVw=
@@ -1264,6 +1266,8 @@ github.com/yuin/goldmark v1.3.5/go.mod h1:mwnBkeHKe2W/ZEtQ+71ViKU8L12m81fl3OWwC1
 github.com/yvasiyarov/go-metrics v0.0.0-20140926110328-57bccd1ccd43/go.mod h1:aX5oPXxHm3bOH+xeAttToC8pqch2ScQN/JoXYupl6xs=
 github.com/yvasiyarov/gorelic v0.0.0-20141212073537-a9bba5b9ab50/go.mod h1:NUSPSUX/bi6SeDMUh6brw0nXpxHnc96TguQh0+r/ssA=
 github.com/yvasiyarov/newrelic_platform_go v0.0.0-20140908184405-b21fdbd4370f/go.mod h1:GlGEuHIJweS1mbCqG+7vt2nvWLzLLnRHbXz5JKd/Qbg=
+github.com/zeebo/errs v1.2.2 h1:5NFypMTuSdoySVTqlNs1dEoU21QVamMQJxW/Fii5O7g=
+github.com/zeebo/errs v1.2.2/go.mod h1:sgbWHsvVuTPHcqJJGQ1WhI5KbWlHYz+2+2C/LSEtCw4=
 github.com/ziutek/mymysql v1.5.4/go.mod h1:LMSpPZ6DbqWFxNCHW77HeMg9I646SAhApZ/wKdgO/C0=
 go.etcd.io/bbolt v1.3.3/go.mod h1:IbVyRI1SCnLcuJnV2u8VeU0CEYM7e686BmAb1XKL+uU=
 go.etcd.io/bbolt v1.3.5/go.mod h1:G5EMThwa9y8QZGBClrRx5EY+Yw9kAhnjy3bSjsnlVTQ=
@@ -1803,6 +1807,7 @@ google.golang.org/genproto v0.0.0-20200526211855-cb27e3aa2013/go.mod h1:NbSheEEY
 google.golang.org/genproto v0.0.0-20200618031413-b414f8b61790/go.mod h1:jDfRM7FcilCzHH/e9qn6dsT145K34l5v+OpcnNgKAAA=
 google.golang.org/genproto v0.0.0-20200729003335-053ba62fc06f/go.mod h1:FWY/as6DDZQgahTzZj3fqbO1CbirC29ZNUFHwi0/+no=
 google.golang.org/genproto v0.0.0-20200804131852-c06518451d9c/go.mod h1:FWY/as6DDZQgahTzZj3fqbO1CbirC29ZNUFHwi0/+no=
+google.golang.org/genproto v0.0.0-20200806141610-86f49bd18e98/go.mod h1:FWY/as6DDZQgahTzZj3fqbO1CbirC29ZNUFHwi0/+no=
 google.golang.org/genproto v0.0.0-20200825200019-8632dd797987/go.mod h1:FWY/as6DDZQgahTzZj3fqbO1CbirC29ZNUFHwi0/+no=
 google.golang.org/genproto v0.0.0-20200904004341-0bd0a958aa1d/go.mod h1:FWY/as6DDZQgahTzZj3fqbO1CbirC29ZNUFHwi0/+no=
 google.golang.org/genproto v0.0.0-20201019141844-1ed22bb0c154/go.mod h1:FWY/as6DDZQgahTzZj3fqbO1CbirC29ZNUFHwi0/+no=
@@ -1868,6 +1873,7 @@ google.golang.org/grpc v1.39.1/go.mod h1:PImNr+rS9TWYb2O4/emRugxiyHZ5JyHW5F+RPnD
 google.golang.org/grpc v1.40.0 h1:AGJ0Ih4mHjSeibYkFGh1dD9KJ/eOtZ93I6hoHhukQ5Q=
 google.golang.org/grpc v1.40.0/go.mod h1:ogyxbiOoUXAkP+4+xa6PZSE9DZgIHtSpzjDTB9KAK34=
 google.golang.org/grpc/cmd/protoc-gen-go-grpc v1.1.0/go.mod h1:6Kw0yEErY5E/yWrBtf03jp27GLLJujG4z/JK95pnjjw=
+google.golang.org/grpc/examples v0.0.0-20201130180447-c456688b1860/go.mod h1:Ly7ZA/ARzg8fnPU9TyZIxoz33sEUuWX7txiqs8lPTgE=
 google.golang.org/protobuf v0.0.0-20200109180630-ec00e32a8dfd/go.mod h1:DFci5gLYBciE7Vtevhsrf46CRTquxDuWsQurQQe4oz8=
 google.golang.org/protobuf v0.0.0-20200221191635-4d8936d0db64/go.mod h1:kwYJMbMJ01Woi6D6+Kah6886xMZcty6N08ah7+eCXa0=
 google.golang.org/protobuf v0.0.0-20200228230310-ab0ca4ff8a60/go.mod h1:cfTl7dwQJ+fmap5saPgwCLgHXTUD7jkjRqWcaiX5VyM=
@@ -1904,6 +1910,7 @@ gopkg.in/natefinch/lumberjack.v2 v2.0.0/go.mod h1:l0ndWWf7gzL7RNwBG7wST/UCcT4T24
 gopkg.in/resty.v1 v1.12.0/go.mod h1:mDo4pnntr5jdWRML875a/NmxYqAlA73dVijT2AXvQQo=
 gopkg.in/square/go-jose.v2 v2.2.2/go.mod h1:M9dMgbHiYLoDGQrXy7OpJDJWiKiU//h+vD76mk0e1AI=
 gopkg.in/square/go-jose.v2 v2.3.1/go.mod h1:M9dMgbHiYLoDGQrXy7OpJDJWiKiU//h+vD76mk0e1AI=
+gopkg.in/square/go-jose.v2 v2.4.1/go.mod h1:M9dMgbHiYLoDGQrXy7OpJDJWiKiU//h+vD76mk0e1AI=
 gopkg.in/square/go-jose.v2 v2.5.1/go.mod h1:M9dMgbHiYLoDGQrXy7OpJDJWiKiU//h+vD76mk0e1AI=
 gopkg.in/square/go-jose.v2 v2.6.0 h1:NGk74WTnPKBNUhNzQX7PYcTLUjoq7mzKk2OKbvwk2iI=
 gopkg.in/square/go-jose.v2 v2.6.0/go.mod h1:M9dMgbHiYLoDGQrXy7OpJDJWiKiU//h+vD76mk0e1AI=
diff --git a/pilot/pkg/bootstrap/certcontroller.go b/pilot/pkg/bootstrap/certcontroller.go
index d2120b40d8..2e0043a504 100644
--- a/pilot/pkg/bootstrap/certcontroller.go
+++ b/pilot/pkg/bootstrap/certcontroller.go
@@ -47,6 +47,39 @@ const (
 	defaultCACertPath = "./var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
 )
 
+var (
+	SpireCertProvider = "spire"
+)
+
+func (s *Server) setIstioCertBundleAndNotify(certChain []byte, key []byte, bundle []byte) {
+	keyPair, err := tls.X509KeyPair(certChain, key)
+
+	if err != nil {
+		log.Errorf("istiod loading x509 key pairs failed: %v", err)
+		return
+	}
+	for _, c := range keyPair.Certificate {
+		x509Cert, err := x509.ParseCertificates(c)
+		if err != nil {
+			log.Errorf("x509 cert - ParseCertificates() error: %v", err)
+			return
+		}
+		for _, c := range x509Cert {
+			log.Infof("x509 cert - Issuer: %q, Subject: %q, SN: %x, NotBefore: %q, NotAfter: %q",
+				c.Issuer, c.Subject, c.SerialNumber,
+				c.NotBefore.Format(time.RFC3339), c.NotAfter.Format(time.RFC3339))
+		}
+	}
+
+	s.certMu.Lock()
+	s.istiodCert = &keyPair
+	s.certMu.Unlock()
+	log.Info("istiod certificates are set")
+
+	s.istiodCertBundleWatcher.SetAndNotify(nil, nil, bundle)
+	log.Info("istiod Cert Bundle Watcher notified")
+}
+
 // CertController can create certificates signed by K8S server.
 func (s *Server) initCertController(args *PilotArgs) error {
 	var err error
diff --git a/pilot/pkg/bootstrap/server.go b/pilot/pkg/bootstrap/server.go
index 339abeb0ff..49b8719e70 100644
--- a/pilot/pkg/bootstrap/server.go
+++ b/pilot/pkg/bootstrap/server.go
@@ -40,6 +40,8 @@ import (
 	"k8s.io/client-go/rest"
 	"k8s.io/client-go/tools/cache"
 
+	"github.com/spiffe/go-spiffe/v2/spiffeid"
+	"github.com/spiffe/go-spiffe/v2/workloadapi"
 	"istio.io/api/security/v1beta1"
 	"istio.io/istio/pilot/pkg/features"
 	istiogrpc "istio.io/istio/pilot/pkg/grpc"
@@ -184,6 +186,9 @@ type Server struct {
 	statusReporter *status.Reporter
 	// RWConfigStore is the configstore which allows updates, particularly for status.
 	RWConfigStore model.ConfigStoreCache
+
+	// source of X.509 certs and bundle, when using SPIRE as cert provider
+	x509Source *workloadapi.X509Source
 }
 
 // NewServer creates a new Server instance based on the provided arguments.
@@ -216,6 +221,16 @@ func NewServer(args *PilotArgs, initFuncs ...func(*Server)) (*Server, error) {
 	for _, fn := range initFuncs {
 		fn(s)
 	}
+
+	if strings.EqualFold(features.PilotCertProvider, SpireCertProvider) {
+		ctx := context.Background()
+		x509Source, err := workloadapi.NewX509Source(ctx)
+		if err != nil {
+			return nil, fmt.Errorf("failed creating spiffe X.509 source: %v", err)
+		}
+		s.x509Source = x509Source
+	}
+
 	// Initialize workload Trust Bundle before XDS Server
 	e.TrustBundle = s.workloadTrustBundle
 	s.XDSServer = xds.NewDiscoveryServer(e, args.Plugins, args.PodName, args.Namespace)
@@ -947,6 +962,29 @@ func (s *Server) initIstiodCertLoader() error {
 
 // initIstiodCerts creates Istiod certificates and also sets up watches to them.
 func (s *Server) initIstiodCerts(args *PilotArgs, host string) error {
+
+	pilotCertProvider := features.PilotCertProvider
+	log.Infof("pilotCertProvider: %s", pilotCertProvider)
+
+	if strings.EqualFold(pilotCertProvider, SpireCertProvider) {
+
+		chain, key, err := s.getCertAndKeyBytes()
+		if err != nil {
+			return err
+		}
+
+		bundleBytes, err := s.getBundleBytes()
+		if err != nil {
+			return err
+		}
+
+		s.setIstioCertBundleAndNotify(chain, key, bundleBytes)
+
+		s.watchIstioCertUpdates()
+
+		return nil
+	}
+
 	// Skip all certificates
 	var err error
 
@@ -996,9 +1034,64 @@ func (s *Server) initIstiodCerts(args *PilotArgs, host string) error {
 	return err
 }
 
+func (s *Server) watchIstioCertUpdates() {
+	go func() {
+		updatedChan := s.x509Source.Updated()
+		for {
+			<-updatedChan
+			chain, key, err := s.getCertAndKeyBytes()
+			if err != nil {
+				log.Errorf("error watching SPIRE updates: %v", err)
+				continue
+			}
+
+			bundleBytes, err := s.getBundleBytes()
+			if err != nil {
+				log.Errorf("error watching SPIRE updates: %v", err)
+				continue
+			}
+
+			s.setIstioCertBundleAndNotify(chain, key, bundleBytes)
+		}
+	}()
+}
+
+func (s *Server) getCertAndKeyBytes() ([]byte, []byte, error) {
+	svid, err := s.x509Source.GetX509SVID()
+	if err != nil {
+		return nil, nil, fmt.Errorf("failed fetching X.509 SVID: %v", err)
+	}
+
+	chain, key, err := svid.Marshal()
+	if err != nil {
+		return nil, nil, fmt.Errorf("unable to marshal X.509 SVID: %v", err)
+	}
+
+	return chain, key, nil
+}
+
+func (s *Server) getBundleBytes() ([]byte, error) {
+	trustDomain, err := spiffeid.TrustDomainFromString(spiffe.GetTrustDomain())
+	if err != nil {
+		return nil, fmt.Errorf("error trying to parse trust domain %q reason: %v", spiffe.GetTrustDomain(), err)
+	}
+
+	bundle, err := s.x509Source.GetX509BundleForTrustDomain(trustDomain)
+	if err != nil {
+		return nil, fmt.Errorf("unable to find X.509 bundle for trust domain %q: %v", trustDomain, err)
+	}
+
+	bundleBytes, err := bundle.Marshal()
+	if err != nil {
+		return nil, fmt.Errorf("unable to marshal X.509 byndle: %v", err)
+	}
+	return bundleBytes, nil
+
+}
+
 // createPeerCertVerifier creates a SPIFFE certificate verifier with the current istiod configuration.
 func (s *Server) createPeerCertVerifier(tlsOptions TLSOptions) (*spiffe.PeerCertVerifier, error) {
-	if tlsOptions.CaCertFile == "" && s.CA == nil && features.SpiffeBundleEndpoints == "" && !s.isDisableCa() {
+	if tlsOptions.CaCertFile == "" && s.CA == nil && features.SpiffeBundleEndpoints == "" && strings.ToLower(features.PilotCertProvider) != SpireCertProvider {
 		// Running locally without configured certs - no TLS mode
 		return nil, nil
 	}
@@ -1034,6 +1127,17 @@ func (s *Server) createPeerCertVerifier(tlsOptions TLSOptions) (*spiffe.PeerCert
 		peerCertVerifier.AddMappings(certMap)
 	}
 
+	if strings.EqualFold(features.PilotCertProvider, SpireCertProvider) {
+		bundleBytes, err := s.getBundleBytes()
+		if err != nil {
+			return nil, err
+		}
+		err = peerCertVerifier.AddMappingFromPEM(spiffe.GetTrustDomain(), bundleBytes)
+		if err != nil {
+			return nil, fmt.Errorf("add root CAs into peerCertVerifier failed: %v", err)
+		}
+	}
+
 	return peerCertVerifier, nil
 }
 
diff --git a/pkg/istio-agent/agent.go b/pkg/istio-agent/agent.go
index 7c67e787e6..4a3bc045ff 100644
--- a/pkg/istio-agent/agent.go
+++ b/pkg/istio-agent/agent.go
@@ -109,7 +109,7 @@ type Agent struct {
 	envoyWaitCh chan error
 
 	sdsServer   *sds.Server
-	secretCache *cache.SecretManagerClient
+	secretCache security.SecretProvider
 
 	// Used when proxying envoy xds via istio-agent is enabled.
 	xdsProxy *XdsProxy
@@ -618,7 +618,12 @@ func (a *Agent) FindRootCAForCA() (string, error) {
 }
 
 // newSecretManager creates the SecretManager for workload secrets
-func (a *Agent) newSecretManager() (*cache.SecretManagerClient, error) {
+func (a *Agent) newSecretManager() (security.SecretProvider, error) {
+	if strings.ToLower(a.secOpts.PilotCertProvider) == "spire" {
+		log.Info("Using SPIRE identity plane")
+		return cache.NewSpireSecretManager(a.secOpts)
+	}
+
 	// If proxy is using file mounted certs, we do not have to connect to CA.
 	if a.secOpts.FileMountedCerts {
 		log.Info("Workload is using file mounted certificates. Skipping connecting to CA")
diff --git a/pkg/security/security.go b/pkg/security/security.go
index e7a896a4e0..0df9e2fa1e 100644
--- a/pkg/security/security.go
+++ b/pkg/security/security.go
@@ -253,6 +253,13 @@ type SecretManager interface {
 	GenerateSecret(resourceName string) (*SecretItem, error)
 }
 
+type SecretProvider interface {
+	SecretManager
+	Close()
+	SetUpdateCallback(func(string))
+	UpdateConfigTrustBundle([]byte) error
+}
+
 // TokenExchanger provides common interfaces so that authentication providers could choose to implement their specific logic.
 type TokenExchanger interface {
 	// ExchangeToken provides a common interface to exchange an existing token for a new one.
diff --git a/security/pkg/nodeagent/cache/spiresecret.go b/security/pkg/nodeagent/cache/spiresecret.go
new file mode 100644
index 0000000000..57c37c367f
--- /dev/null
+++ b/security/pkg/nodeagent/cache/spiresecret.go
@@ -0,0 +1,187 @@
+package cache
+
+import (
+	"bytes"
+	"fmt"
+	"sync"
+	"time"
+
+	"github.com/spiffe/go-spiffe/v2/spiffeid"
+	"github.com/spiffe/go-spiffe/v2/workloadapi"
+	"golang.org/x/net/context"
+	"google.golang.org/grpc/codes"
+	"google.golang.org/grpc/status"
+	"istio.io/istio/pkg/security"
+	pkiutil "istio.io/istio/security/pkg/pki/util"
+	"istio.io/pkg/log"
+)
+
+type SpireSecretManager struct {
+	sync.RWMutex
+	trustDomain       spiffeid.TrustDomain
+	configTrustBundle []byte
+	secretItem        *security.SecretItem
+	notifyCallback    func(resourceName string)
+	cancelWatcher     context.CancelFunc
+}
+
+func NewSpireSecretManager(opt *security.Options) (*SpireSecretManager, error) {
+	td, err := spiffeid.TrustDomainFromString(opt.TrustDomain)
+	if err != nil {
+		return nil, fmt.Errorf("error trying to parse trust domain %q reason: %v", opt.TrustDomain, err)
+	}
+
+	sm := &SpireSecretManager{
+		trustDomain: td,
+	}
+
+	ctx, cancel := context.WithCancel(context.Background())
+	sm.cancelWatcher = cancel
+	go sm.watcherTask(ctx)
+
+	return sm, nil
+}
+
+func (s *SpireSecretManager) GenerateSecret(resourceName string) (*security.SecretItem, error) {
+	s.RLock()
+	defer s.RUnlock()
+
+	si := s.secretItem
+	if si == nil {
+		return nil, fmt.Errorf("secret was not in cache for resource: %v", resourceName)
+	}
+
+	if resourceName == security.RootCertReqResourceName {
+		rootCertBundle := s.mergeConfigTrustBundle(si.RootCert)
+		ns := &security.SecretItem{
+			ResourceName: resourceName,
+			RootCert:     rootCertBundle,
+		}
+		cacheLog.WithLabels("ttl", time.Until(si.ExpireTime)).Info("returned workload trust anchor from cache")
+		return ns, nil
+	}
+
+	ns := &security.SecretItem{
+		ResourceName:     resourceName,
+		CertificateChain: si.CertificateChain,
+		PrivateKey:       si.PrivateKey,
+		ExpireTime:       si.ExpireTime,
+		CreatedTime:      si.CreatedTime,
+	}
+	cacheLog.WithLabels("ttl", time.Until(si.ExpireTime)).Info("returned workload certificate from cache")
+	return ns, nil
+}
+
+func (s *SpireSecretManager) UpdateConfigTrustBundle(trustBundle []byte) error {
+	//TODO: remove this log after testing it
+	log.WithLabels("UpdateConfigTrustBundle").Info(string(trustBundle))
+	s.Lock()
+	defer s.Unlock()
+
+	if bytes.Equal(s.configTrustBundle, trustBundle) {
+		return nil
+	}
+	s.configTrustBundle = trustBundle
+	s.callUpdateCallback(security.RootCertReqResourceName)
+	return nil
+}
+
+func (s *SpireSecretManager) Close() {
+	if s.cancelWatcher != nil {
+		log.Info("Closing secret manager")
+		s.cancelWatcher()
+	}
+}
+
+func (s *SpireSecretManager) SetUpdateCallback(f func(resourceName string)) {
+	s.Lock()
+	defer s.Unlock()
+	s.notifyCallback = f
+}
+
+// UpdateX509SVIDs is run every time an SVID is updated or bundle
+func (s *SpireSecretManager) OnX509ContextUpdate(c *workloadapi.X509Context) {
+	log.Info("Got new identities from SPIRE") //TODO: change this log
+	if len(c.SVIDs) < 1 {
+		log.Error("Identities were not found on workload API response")
+		return
+	}
+	if len(c.SVIDs[0].Certificates) < 1 {
+		log.Error("Leaf certificate was not found on workload API response")
+		return
+	}
+	// lest's assume the first identity is the right one
+	svid := c.SVIDs[0]
+	workloadChain, workloadKey, err := svid.Marshal()
+	if err != nil {
+		log.Fatalf("Unable to marshal X.509 SVID: %v", err)
+		return
+	}
+
+	bundle, ok := c.Bundles.Get(s.trustDomain)
+	if !ok {
+		log.WithLabels("trust_domain", s.trustDomain).Fatal("Unable to get trust bundle for trust domain")
+		return
+	}
+
+	root, err := bundle.Marshal()
+	if err != nil {
+		log.Fatalf("Unable to marshal trust bundle: %v", err)
+		return
+	}
+
+	certChain := concatCerts([]string{string(workloadChain), string(root)})
+	leaf := c.SVIDs[0].Certificates[0]
+
+	item := &security.SecretItem{
+		CertificateChain: certChain,
+		PrivateKey:       workloadKey,
+		RootCert:         root,
+		ResourceName:     security.WorkloadKeyCertResourceName,
+		CreatedTime:      leaf.NotBefore,
+		ExpireTime:       leaf.NotAfter,
+	}
+
+	s.Lock()
+	defer s.Unlock()
+
+	if s.secretItem == nil || !bytes.Equal(s.secretItem.RootCert, item.RootCert) {
+		s.callUpdateCallback(security.RootCertReqResourceName)
+	}
+	if s.secretItem == nil || !bytes.Equal(s.secretItem.CertificateChain, item.CertificateChain) {
+		s.callUpdateCallback(security.WorkloadKeyCertResourceName)
+	}
+	s.secretItem = item
+}
+
+// OnX509ContextWatchError is run when the client runs into an error
+func (s *SpireSecretManager) OnX509ContextWatchError(err error) {
+	if status.Code(err) != codes.Canceled {
+		log.Infof("error while calling workload API: %v", err)
+	}
+}
+
+func (s *SpireSecretManager) callUpdateCallback(resourceName string) {
+	log.WithLabels("resource", resourceName).Info("Identity updated") //TODO: improve message
+	if s.notifyCallback != nil {
+		s.notifyCallback(resourceName)
+	}
+}
+
+func (s *SpireSecretManager) mergeConfigTrustBundle(rootCert []byte) []byte {
+	return pkiutil.AppendCertByte(s.configTrustBundle, rootCert)
+}
+
+func (s *SpireSecretManager) watcherTask(ctx context.Context) {
+	// Creates a new Workload API client, connecting to the socket path provided by SPIFFE_ENDPOINT_SOCKET
+	client, err := workloadapi.New(ctx)
+	if err != nil {
+		log.Fatalf("Unable to create workload API client: %v", err)
+	}
+	defer client.Close()
+
+	err = client.WatchX509Context(ctx, s)
+	if err != nil && status.Code(err) != codes.Canceled {
+		log.Fatalf("Error watching SPIRE workload API: %v", err)
+	}
+}
