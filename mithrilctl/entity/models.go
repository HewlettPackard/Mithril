package entity

type AutoGenerated struct {
	Global struct {
		CaAddress           string `json:"caAddress"`
		CaName              string `json:"caName"`
		ConfigCluster       bool   `json:"configCluster"`
		ConfigValidation    bool   `json:"configValidation"`
		DefaultNodeSelector struct {
		} `json:"defaultNodeSelector"`
		DefaultPodDisruptionBudget struct {
			Enabled bool `json:"enabled"`
		} `json:"defaultPodDisruptionBudget"`
		DefaultResources struct {
			Requests struct {
				CPU string `json:"cpu"`
			} `json:"requests"`
		} `json:"defaultResources"`
		Enabled          bool     `json:"enabled"`
		ExternalIstiod   bool     `json:"externalIstiod"`
		Hub              string   `json:"hub"`
		ImagePullPolicy  string   `json:"imagePullPolicy"`
		ImagePullSecrets []string `json:"imagePullSecrets"`
		IstioNamespace   string   `json:"istioNamespace"`
		Istiod           struct {
			EnableAnalysis bool `json:"enableAnalysis"`
		} `json:"istiod"`
		JwtPolicy string `json:"jwtPolicy"`
		LogAsJSON bool   `json:"logAsJson"`
		Logging   struct {
			Level string `json:"level"`
		} `json:"logging"`
		MeshID       string `json:"meshID"`
		MeshNetworks struct {
		} `json:"meshNetworks"`
		MountMtlsCerts bool `json:"mountMtlsCerts"`
		MultiCluster   struct {
			ClusterName string `json:"clusterName"`
			Enabled     bool   `json:"enabled"`
		} `json:"multiCluster"`
		Namespace                    string `json:"namespace"`
		Network                      string `json:"network"`
		OmitSidecarInjectorConfigMap bool   `json:"omitSidecarInjectorConfigMap"`
		OneNamespace                 bool   `json:"oneNamespace"`
		OperatorManageWebhooks       bool   `json:"operatorManageWebhooks"`
		PilotCertProvider            string `json:"pilotCertProvider"`
		PriorityClassName            string `json:"priorityClassName"`
		Proxy                        struct {
			AutoInject                      string `json:"autoInject"`
			ClusterDomain                   string `json:"clusterDomain"`
			ComponentLogLevel               string `json:"componentLogLevel"`
			EnableCoreDump                  bool   `json:"enableCoreDump"`
			ExcludeIPRanges                 string `json:"excludeIPRanges"`
			ExcludeInboundPorts             string `json:"excludeInboundPorts"`
			ExcludeOutboundPorts            string `json:"excludeOutboundPorts"`
			HoldApplicationUntilProxyStarts bool   `json:"holdApplicationUntilProxyStarts"`
			Image                           string `json:"image"`
			IncludeIPRanges                 string `json:"includeIPRanges"`
			IncludeInboundPorts             string `json:"includeInboundPorts"`
			IncludeOutboundPorts            string `json:"includeOutboundPorts"`
			LogLevel                        string `json:"logLevel"`
			Privileged                      bool   `json:"privileged"`
			ReadinessFailureThreshold       int    `json:"readinessFailureThreshold"`
			ReadinessInitialDelaySeconds    int    `json:"readinessInitialDelaySeconds"`
			ReadinessPeriodSeconds          int    `json:"readinessPeriodSeconds"`
			Resources                       struct {
				Limits struct {
					CPU    string `json:"cpu"`
					Memory string `json:"memory"`
				} `json:"limits"`
				Requests struct {
					CPU    string `json:"cpu"`
					Memory string `json:"memory"`
				} `json:"requests"`
			} `json:"resources"`
			StatusPort int    `json:"statusPort"`
			Tracer     string `json:"tracer"`
		} `json:"proxy"`
		ProxyInit struct {
			Image     string `json:"image"`
			Resources struct {
				Limits struct {
					CPU    string `json:"cpu"`
					Memory string `json:"memory"`
				} `json:"limits"`
				Requests struct {
					CPU    string `json:"cpu"`
					Memory string `json:"memory"`
				} `json:"requests"`
			} `json:"resources"`
		} `json:"proxy_init"`
		RemotePilotAddress string `json:"remotePilotAddress"`
		Sds                struct {
			Token struct {
				Aud string `json:"aud"`
			} `json:"token"`
		} `json:"sds"`
		Sts struct {
			ServicePort int `json:"servicePort"`
		} `json:"sts"`
		Tag    string `json:"tag"`
		Tracer struct {
			Datadog struct {
				Address string `json:"address"`
			} `json:"datadog"`
			Lightstep struct {
				AccessToken string `json:"accessToken"`
				Address     string `json:"address"`
			} `json:"lightstep"`
			Stackdriver struct {
				Debug                    bool `json:"debug"`
				MaxNumberOfAnnotations   int  `json:"maxNumberOfAnnotations"`
				MaxNumberOfAttributes    int  `json:"maxNumberOfAttributes"`
				MaxNumberOfMessageEvents int  `json:"maxNumberOfMessageEvents"`
			} `json:"stackdriver"`
			Zipkin struct {
				Address string `json:"address"`
			} `json:"zipkin"`
		} `json:"tracer"`
		UseMCP bool `json:"useMCP"`
	} `json:"global"`
	IstioCni struct {
		Enabled bool `json:"enabled"`
	} `json:"istio_cni"`
	Revision               string `json:"revision"`
	SidecarInjectorWebhook struct {
		AlwaysInjectSelector      []interface{} `json:"alwaysInjectSelector"`
		DefaultTemplates          []interface{} `json:"defaultTemplates"`
		EnableNamespacesByDefault bool          `json:"enableNamespacesByDefault"`
		InjectedAnnotations       struct {
		} `json:"injectedAnnotations"`
		NeverInjectSelector []interface{} `json:"neverInjectSelector"`
		ObjectSelector      struct {
			AutoInject bool `json:"autoInject"`
			Enabled    bool `json:"enabled"`
		} `json:"objectSelector"`
		RewriteAppHTTPProbe bool `json:"rewriteAppHTTPProbe"`
		Templates           struct {
			Spire string `json:"spire"`
		} `json:"templates"`
	} `json:"sidecarInjectorWebhook"`
}

type SidecarTmpl struct {
	Spec Spec `json:"spec"`
}
type Env struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}
type VolumeMounts struct {
	Name      string `json:"name"`
	MountPath string `json:"mountPath"`
	ReadOnly  bool   `json:"readOnly"`
}
type Containers struct {
	Name         string         `json:"name"`
	Env          []Env          `json:"env"`
	VolumeMounts []VolumeMounts `json:"volumeMounts"`
}
type Csi struct {
	Driver string `json:"driver"`
}
type Volumes struct {
	Name string `json:"name"`
	Csi  Csi    `json:"csi"`
}
type Spec struct {
	Containers []Containers `json:"containers"`
	Volumes    []Volumes    `json:"volumes"`
}

type Config struct {
	MithrilPath string `yaml:"mithrilPath"`
}
